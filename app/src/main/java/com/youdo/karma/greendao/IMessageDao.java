package com.youdo.karma.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.youdo.karma.entity.IMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMESSAGE".
*/
public class IMessageDao extends AbstractDao<IMessage, Long> {

    public static final String TABLENAME = "IMESSAGE";

    /**
     * Properties of entity IMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MsgId = new Property(1, String.class, "msgId", false, "MSG_ID");
        public final static Property ConversationId = new Property(2, long.class, "conversationId", false, "CONVERSATION_ID");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Talker = new Property(4, String.class, "talker", false, "TALKER");
        public final static Property Sender = new Property(5, String.class, "sender", false, "SENDER");
        public final static Property Sender_name = new Property(6, String.class, "sender_name", false, "SENDER_NAME");
        public final static Property MsgType = new Property(7, int.class, "msgType", false, "MSG_TYPE");
        public final static Property IsSend = new Property(8, int.class, "isSend", false, "IS_SEND");
        public final static Property Status = new Property(9, int.class, "status", false, "STATUS");
        public final static Property Create_time = new Property(10, long.class, "create_time", false, "CREATE_TIME");
        public final static Property Send_time = new Property(11, long.class, "send_time", false, "SEND_TIME");
        public final static Property IsRead = new Property(12, boolean.class, "isRead", false, "IS_READ");
        public final static Property FileUrl = new Property(13, String.class, "fileUrl", false, "FILE_URL");
        public final static Property LocalPath = new Property(14, String.class, "localPath", false, "LOCAL_PATH");
        public final static Property FileName = new Property(15, String.class, "fileName", false, "FILE_NAME");
        public final static Property Duration = new Property(16, int.class, "duration", false, "DURATION");
        public final static Property Latitude = new Property(17, double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(18, double.class, "longitude", false, "LONGITUDE");
        public final static Property ImgWidth = new Property(19, int.class, "imgWidth", false, "IMG_WIDTH");
        public final static Property ImgHigh = new Property(20, int.class, "imgHigh", false, "IMG_HIGH");
        public final static Property ImageStatus = new Property(21, int.class, "imageStatus", false, "IMAGE_STATUS");
    }


    public IMessageDao(DaoConfig config) {
        super(config);
    }
    
    public IMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MSG_ID\" TEXT NOT NULL UNIQUE ," + // 1: msgId
                "\"CONVERSATION_ID\" INTEGER NOT NULL ," + // 2: conversationId
                "\"CONTENT\" TEXT NOT NULL ," + // 3: content
                "\"TALKER\" TEXT NOT NULL ," + // 4: talker
                "\"SENDER\" TEXT NOT NULL ," + // 5: sender
                "\"SENDER_NAME\" TEXT NOT NULL ," + // 6: sender_name
                "\"MSG_TYPE\" INTEGER NOT NULL ," + // 7: msgType
                "\"IS_SEND\" INTEGER NOT NULL ," + // 8: isSend
                "\"STATUS\" INTEGER NOT NULL ," + // 9: status
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 10: create_time
                "\"SEND_TIME\" INTEGER NOT NULL ," + // 11: send_time
                "\"IS_READ\" INTEGER NOT NULL ," + // 12: isRead
                "\"FILE_URL\" TEXT," + // 13: fileUrl
                "\"LOCAL_PATH\" TEXT," + // 14: localPath
                "\"FILE_NAME\" TEXT," + // 15: fileName
                "\"DURATION\" INTEGER NOT NULL ," + // 16: duration
                "\"LATITUDE\" REAL NOT NULL ," + // 17: latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 18: longitude
                "\"IMG_WIDTH\" INTEGER NOT NULL ," + // 19: imgWidth
                "\"IMG_HIGH\" INTEGER NOT NULL ," + // 20: imgHigh
                "\"IMAGE_STATUS\" INTEGER NOT NULL );"); // 21: imageStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMsgId());
        stmt.bindLong(3, entity.getConversationId());
        stmt.bindString(4, entity.getContent());
        stmt.bindString(5, entity.getTalker());
        stmt.bindString(6, entity.getSender());
        stmt.bindString(7, entity.getSender_name());
        stmt.bindLong(8, entity.getMsgType());
        stmt.bindLong(9, entity.getIsSend());
        stmt.bindLong(10, entity.getStatus());
        stmt.bindLong(11, entity.getCreate_time());
        stmt.bindLong(12, entity.getSend_time());
        stmt.bindLong(13, entity.getIsRead() ? 1L: 0L);
 
        String fileUrl = entity.getFileUrl();
        if (fileUrl != null) {
            stmt.bindString(14, fileUrl);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(15, localPath);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(16, fileName);
        }
        stmt.bindLong(17, entity.getDuration());
        stmt.bindDouble(18, entity.getLatitude());
        stmt.bindDouble(19, entity.getLongitude());
        stmt.bindLong(20, entity.getImgWidth());
        stmt.bindLong(21, entity.getImgHigh());
        stmt.bindLong(22, entity.getImageStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMsgId());
        stmt.bindLong(3, entity.getConversationId());
        stmt.bindString(4, entity.getContent());
        stmt.bindString(5, entity.getTalker());
        stmt.bindString(6, entity.getSender());
        stmt.bindString(7, entity.getSender_name());
        stmt.bindLong(8, entity.getMsgType());
        stmt.bindLong(9, entity.getIsSend());
        stmt.bindLong(10, entity.getStatus());
        stmt.bindLong(11, entity.getCreate_time());
        stmt.bindLong(12, entity.getSend_time());
        stmt.bindLong(13, entity.getIsRead() ? 1L: 0L);
 
        String fileUrl = entity.getFileUrl();
        if (fileUrl != null) {
            stmt.bindString(14, fileUrl);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(15, localPath);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(16, fileName);
        }
        stmt.bindLong(17, entity.getDuration());
        stmt.bindDouble(18, entity.getLatitude());
        stmt.bindDouble(19, entity.getLongitude());
        stmt.bindLong(20, entity.getImgWidth());
        stmt.bindLong(21, entity.getImgHigh());
        stmt.bindLong(22, entity.getImageStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IMessage readEntity(Cursor cursor, int offset) {
        IMessage entity = new IMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // msgId
            cursor.getLong(offset + 2), // conversationId
            cursor.getString(offset + 3), // content
            cursor.getString(offset + 4), // talker
            cursor.getString(offset + 5), // sender
            cursor.getString(offset + 6), // sender_name
            cursor.getInt(offset + 7), // msgType
            cursor.getInt(offset + 8), // isSend
            cursor.getInt(offset + 9), // status
            cursor.getLong(offset + 10), // create_time
            cursor.getLong(offset + 11), // send_time
            cursor.getShort(offset + 12) != 0, // isRead
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // fileUrl
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // localPath
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // fileName
            cursor.getInt(offset + 16), // duration
            cursor.getDouble(offset + 17), // latitude
            cursor.getDouble(offset + 18), // longitude
            cursor.getInt(offset + 19), // imgWidth
            cursor.getInt(offset + 20), // imgHigh
            cursor.getInt(offset + 21) // imageStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsgId(cursor.getString(offset + 1));
        entity.setConversationId(cursor.getLong(offset + 2));
        entity.setContent(cursor.getString(offset + 3));
        entity.setTalker(cursor.getString(offset + 4));
        entity.setSender(cursor.getString(offset + 5));
        entity.setSender_name(cursor.getString(offset + 6));
        entity.setMsgType(cursor.getInt(offset + 7));
        entity.setIsSend(cursor.getInt(offset + 8));
        entity.setStatus(cursor.getInt(offset + 9));
        entity.setCreate_time(cursor.getLong(offset + 10));
        entity.setSend_time(cursor.getLong(offset + 11));
        entity.setIsRead(cursor.getShort(offset + 12) != 0);
        entity.setFileUrl(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLocalPath(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFileName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDuration(cursor.getInt(offset + 16));
        entity.setLatitude(cursor.getDouble(offset + 17));
        entity.setLongitude(cursor.getDouble(offset + 18));
        entity.setImgWidth(cursor.getInt(offset + 19));
        entity.setImgHigh(cursor.getInt(offset + 20));
        entity.setImageStatus(cursor.getInt(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IMessage entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
