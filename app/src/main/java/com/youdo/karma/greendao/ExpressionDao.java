package com.youdo.karma.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.youdo.karma.entity.Expression;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXPRESSION".
*/
public class ExpressionDao extends AbstractDao<Expression, Long> {

    public static final String TABLENAME = "EXPRESSION";

    /**
     * Properties of entity Expression.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Note = new Property(1, String.class, "note", false, "NOTE");
        public final static Property Pic_id = new Property(2, String.class, "pic_id", false, "PIC_ID");
        public final static Property Theme = new Property(3, String.class, "theme", false, "THEME");
        public final static Property Theme_id = new Property(4, int.class, "theme_id", false, "THEME_ID");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property Url = new Property(6, String.class, "url", false, "URL");
    }


    public ExpressionDao(DaoConfig config) {
        super(config);
    }
    
    public ExpressionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXPRESSION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NOTE\" TEXT NOT NULL ," + // 1: note
                "\"PIC_ID\" TEXT NOT NULL ," + // 2: pic_id
                "\"THEME\" TEXT NOT NULL ," + // 3: theme
                "\"THEME_ID\" INTEGER NOT NULL ," + // 4: theme_id
                "\"TYPE\" TEXT NOT NULL ," + // 5: type
                "\"URL\" TEXT NOT NULL );"); // 6: url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXPRESSION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Expression entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getNote());
        stmt.bindString(3, entity.getPic_id());
        stmt.bindString(4, entity.getTheme());
        stmt.bindLong(5, entity.getTheme_id());
        stmt.bindString(6, entity.getType());
        stmt.bindString(7, entity.getUrl());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Expression entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getNote());
        stmt.bindString(3, entity.getPic_id());
        stmt.bindString(4, entity.getTheme());
        stmt.bindLong(5, entity.getTheme_id());
        stmt.bindString(6, entity.getType());
        stmt.bindString(7, entity.getUrl());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Expression readEntity(Cursor cursor, int offset) {
        Expression entity = new Expression( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // note
            cursor.getString(offset + 2), // pic_id
            cursor.getString(offset + 3), // theme
            cursor.getInt(offset + 4), // theme_id
            cursor.getString(offset + 5), // type
            cursor.getString(offset + 6) // url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Expression entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNote(cursor.getString(offset + 1));
        entity.setPic_id(cursor.getString(offset + 2));
        entity.setTheme(cursor.getString(offset + 3));
        entity.setTheme_id(cursor.getInt(offset + 4));
        entity.setType(cursor.getString(offset + 5));
        entity.setUrl(cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Expression entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Expression entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Expression entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
